apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: "${CLASS_NAME}"
  namespace: "${NAMESPACE}"
spec:
  controlPlane:
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: RKE2ControlPlaneTemplate
      name: ${CLASS_NAME}-control-plane
    machineInfrastructure:
      ref:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: DockerMachineTemplate
        name: ${CLASS_NAME}-control-plane
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: DockerClusterTemplate
      name: ${CLASS_NAME}-cluster
  workers:
    machineDeployments:
    - class: default-worker
      template:
        bootstrap:
          ref:
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            kind: RKE2ConfigTemplate
            name: ${CLASS_NAME}-default-worker-bootstraptemplate
        infrastructure:
          ref:
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
            kind: DockerMachineTemplate
            name: ${CLASS_NAME}-default-worker-machinetemplate
  variables:
    - name: dockerKindImage
      required: true
      schema:
        openAPIV3Schema:
          type: string
          default: kindest/node:v1.28.12
  patches:
    - name: controlPlaneDockerKindImage 
      definitions:
      - selector:
          apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
          kind: DockerMachineTemplate
          matchResources:
            controlPlane: true
        jsonPatches:
          - op: add
            path: /spec/template/spec/customImage
            valueFrom:
              variable: dockerKindImage
    - name: workerDockerKindImage
      definitions:
      - selector:
          apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
          kind: DockerMachineTemplate
          matchResources:
            machineDeploymentClass:
              names:
              - default-worker
        jsonPatches:
        - op: add
          path: "/spec/template/spec/customImage"
          valueFrom:
            variable: dockerKindImage
---
apiVersion: v1
data:
  value: |-
    # generated by kind
    global
      log /dev/log local0
      log /dev/log local1 notice
      daemon
      # limit memory usage to approximately 18 MB
      # (see https://github.com/kubernetes-sigs/kind/pull/3115)
      maxconn 100000

    resolvers docker
      nameserver dns 127.0.0.11:53

    defaults
      log global
      mode tcp
      option dontlognull
      # TODO: tune these
      timeout connect 5000
      timeout client 50000
      timeout server 50000
      # allow to boot despite dns don't resolve backends
      default-server init-addr none

    frontend stats
      mode http
      bind *:8404
      stats enable
      stats uri /stats
      stats refresh 1s
      stats admin if TRUE

    frontend control-plane
      bind *:{{ .FrontendControlPlanePort }}
      {{ if .IPv6 -}}
      bind :::{{ .FrontendControlPlanePort }};
      {{- end }}
      default_backend kube-apiservers

    backend kube-apiservers
      option httpchk GET /healthz
      http-check expect status 401
      # TODO: we should be verifying (!)
      {{range $server, $backend := .BackendServers}}
      server {{ $server }} {{ JoinHostPort $backend.Address $.BackendControlPlanePort }} check check-ssl verify none resolvers docker resolve-prefer {{ if $.IPv6 -}} ipv6 {{- else -}} ipv4 {{- end }}
      {{- end}}

    frontend rke2-join
      bind *:9345
      {{ if .IPv6 -}}
      bind :::9345;
      {{- end }}
      default_backend rke2-servers

    backend rke2-servers
      option httpchk GET /v1-rke2/readyz
      http-check expect status 403
      {{range $server, $backend := .BackendServers}}
      server {{ $server }} {{ $backend.Address }}:9345 check check-ssl verify none
      {{- end}}
kind: ConfigMap
metadata:
  name: ${CLASS_NAME}-lb-config
  namespace: "${NAMESPACE}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: DockerClusterTemplate
metadata:
  name: ${CLASS_NAME}-cluster
  namespace: "${NAMESPACE}"
spec:
  template:
    spec:
      loadBalancer:
        customHAProxyConfigTemplateRef:
          name: ${CLASS_NAME}-lb-config
---
kind: RKE2ControlPlaneTemplate
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
metadata:
  name: ${CLASS_NAME}-control-plane
  namespace: "${NAMESPACE}"
spec:
  template:
    spec:
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: DockerMachineTemplate
        name: ${CLASS_NAME}-control-plane
      serverConfig:
        cni: calico
        disableComponents:
          kubernetesComponents: [ "cloudController"]
      rolloutStrategy:
        type: "RollingUpdate"
        rollingUpdate:
          maxSurge: 1
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: DockerMachineTemplate
metadata:
  name: ${CLASS_NAME}-control-plane
  namespace: "${NAMESPACE}"
spec:
  template:
    spec:
      customImage: kindest/node:v1.28.0 # will be replaced by the patch
      extraMounts:
      - containerPath: "/var/run/docker.sock"
        hostPath: "/var/run/docker.sock"
      bootstrapTimeout: 15m
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: DockerMachineTemplate
metadata:
  name: ${CLASS_NAME}-default-worker-machinetemplate
  namespace: "${NAMESPACE}"
spec:
  template:
    spec:
      customImage: kindest/node:v1.28.0 # will be replaced by the patch
      extraMounts:
      - containerPath: "/var/run/docker.sock"
        hostPath: "/var/run/docker.sock"
      bootstrapTimeout: 15m
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: RKE2ConfigTemplate
metadata:
  name: ${CLASS_NAME}-default-worker-bootstraptemplate
  namespace: "${NAMESPACE}"
spec:
  template:
    spec: {} 
