apiVersion: v1
kind: Namespace
metadata:
  name: ${CABPR_NAMESPACE}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster 
metadata:
  namespace: ${CABPR_NAMESPACE}
  name: ${CLUSTER_NAME} 
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 10.45.0.0/16
    services:
      cidrBlocks:
      - 10.46.0.0/16
    serviceDomain: cluster.local
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: RKE2ControlPlane
    name: ${CLUSTER_NAME}-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: DockerCluster
    name: ${CLUSTER_NAME}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: DockerCluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: ${CABPR_NAMESPACE}
spec:
  loadBalancer:
    customHAProxyConfigTemplateRef:
      name: ${CLUSTER_NAME}-lb-config
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: RKE2ControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: ${CABPR_NAMESPACE}
spec: 
  replicas: ${CABPR_CP_REPLICAS}
  version: ${KUBERNETES_VERSION}+rke2r1
  privateRegistriesConfig:
    mirrors:
      "docker.io":
        endpoint: 
          - https://registry.belgai.de
    configs:
      "https://registry.belgai.de":
        authSecret: 
          apiVersion: v1
          kind: Secret
          namespace: ${CABPR_NAMESPACE}
          name: auth-secret
        tls:
          tlsConfigSecret:
            apiVersion: v1
            kind: Secret
            namespace: ${CABPR_NAMESPACE}
            name: registry-cert 
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: DockerMachineTemplate
    name: controlplane
  nodeDrainTimeout: 2m
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: DockerMachineTemplate
metadata:
  name: controlplane
  namespace: ${CABPR_NAMESPACE}
spec:
  template:
    spec: {} 
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: worker-md-0
  namespace: ${CABPR_NAMESPACE}
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${CABPR_WK_REPLICAS}
  selector:
    matchLabels:
      cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
  template:
    spec:
      version: ${KUBERNETES_VERSION}+rke2r1
      clusterName: ${CLUSTER_NAME}
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: RKE2ConfigTemplate
          name: ${CLUSTER_NAME}-agent
          namespace: ${CABPR_NAMESPACE}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: DockerMachineTemplate
        name: worker
        namespace: ${CABPR_NAMESPACE}
status: {}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: DockerMachineTemplate
metadata:
  name: worker
  namespace: ${CABPR_NAMESPACE}
spec:
  template:
    spec: {} 
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: RKE2ConfigTemplate
metadata:
  namespace: ${CABPR_NAMESPACE}
  name: ${CLUSTER_NAME}-agent
spec: 
  template:
    spec:
      privateRegistriesConfig:
        mirrors:
          "docker.io":
            endpoint: 
              - https://registry.belgai.de
        configs:
          "https://registry.belgai.de":
            authSecret: 
              apiVersion: v1
              kind: Secret
              namespace: ${CABPR_NAMESPACE}
              name: auth-secret
            tls:
              tlsConfigSecret:
                apiVersion: v1
                kind: Secret
                namespace: ${CABPR_NAMESPACE}
                name: registry-cert
      agentConfig: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: registry-cert
  namespace: ${CABPR_NAMESPACE}
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdBakNDQStxZ0F3SUJBZ0lVWE8xNHg5TTRxMnBoQnZsQ3FYYnB6UjNvZlhJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dZWXhDekFKQmdOVkJBWVRBa1JGTVJBd0RnWURWUVFJREFkQ1lYWmhjbWxoTVE4d0RRWURWUVFIREFaTgpkVzVwWTJneER6QU5CZ05WQkFvTUJrSmxiR2RoYVRFaE1COEdBMVVFQXd3WVRXOW9ZVzFsWkNCQ1pXeG5ZV2xsClpDQklZWE56YVc1bE1TQXdIZ1lKS29aSWh2Y05BUWtCRmhGdGIyaGhiV1ZrUUdKbGJHZGhhUzVrWlRBZUZ3MHkKTWpFeU1qSXlNVEEzTUROYUZ3MHlNekV5TWpJeU1UQTNNRE5hTUlHQU1Rc3dDUVlEVlFRR0V3SkVSVEVRTUE0RwpBMVVFQ0F3SFFtRjJZWEpwWVRFUE1BMEdBMVVFQnd3R1RYVnVhV05vTVE4d0RRWURWUVFLREFaQ1pXeG5ZV2t4Ckd6QVpCZ05WQkFNTUVuSmxaMmx6ZEhKNUxtSmxiR2RoYVM1a1pURWdNQjRHQ1NxR1NJYjNEUUVKQVJZUmJXOW8KWVcxbFpFQmlaV3huWVdrdVpHVXdnZ0lpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFDcgpFOWZGS3gzTFk4L1NPMjdIbit4b3FTd2c5Q1MvdEpPaG83ZnlsWHRTNFJLaGpFZ0hVVnhVWFJnTEpIZ2h3bGlQCnI1ZmFicE9XcHhvb1RwcFpsS2xTRDQ3NXZyNEVScXp2WjBhK21paTlvNU1uUm1WOU1BTFZQbS9XSGpWb0V5WnoKT2N3ZWFnT0l0TXg5bjBtamJyK3hWQno0UGxIQVF3RDNSZUIyNk9nQlFDQThodmRjUmdWdjl4L0tGUUdsazdJKwpmY2pBOXV2dFM4czY0WndtcldUYnV6S1BJMVl6NlYvY0JPZWFPT0x5YVY2QktaQnd2SVk3dldOc3BjbXEvUmhDCmsxS3lMbG5rd29BOTBQOWtuYmUvMVRyeGdYUXBlcW5wdEM0SzQ2SXhJTzRrZzJld21rMkhIc3UzTXE5Z2twWU0KY2UzWmZjKzRGZUVqL25FRDJyYTVKcklpMHY2bHNuRGJtZ1B5b1R3bndISnNjSzlieVJWeGh3YVZIRWZIWjlUUwppYnNjUWNQaCs0MTZwWmYvM01FRGRiaGNBUUZxVnVpVzM0UW5NZy9vUGpaYW1Xc0poc1ZHNGFVMktrSGRYSE8wCkpxZ0EwN1VjWXdWcHZLd2JUckxoQVFTcjAxT0VQQWFGNml6SktaZG9FRldQWVV6elQ4cVk1RTR5ODJleXpqdlcKL3R5L2Q3Y1RCY3ZNRjMzSmRjOWw2Tm9CdU1DaVM3Q0xwSkxUdFFJOHNGSW1LK2JBekJHZFV6SlBzUHYyT0Rvegozd2EvdWdJTU5yOW1UWHN0YWlINFhqc25IbmZhTlNRZS9PRzgxODlwRWxIK1RrMUZuRTBNRnRZcFJPbmRaMTFaCkcyR3JyVHIvTDBVcW5GcXNtVURNY1UvbFVyRmpUelpJMjJ5S1N3UStXd0lEQVFBQm8yd3dhakFmQmdOVkhTTUUKR0RBV2dCUWsrWjRmN21iNHgxWkpsbS9EY0VibS9veGpWakFKQmdOVkhSTUVBakFBTUIwR0ExVWRFUVFXTUJTQwpFbkpsWjJsemRISjVMbUpsYkdkaGFTNWtaVEFkQmdOVkhRNEVGZ1FVaUxqL0NzWkRsT1ZNNURidTUwTW5UZ3hPCmplQXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBSmlhUVFLYzJsVmpRczFhRjExcVBWOWZZZmR5R1VrWHNST1EKSGorNWU0d0tQRmNRMzZTcC9sMTR3MFJGRHlOb0lESXBDK0FBeWFHZy9wMHZZSGN0ZUtDKy9aUHJFRG5zUms4YwpieDZxbWRXbmtnK2s3ZG01N2hjQmxpd2JxSks0elJ5Q2pCVXJyTmZoOTYwckFnaFJVOHluOE40eHpXNFRWaEt6CklYSy9JcHZVSWRhV0o0UzNFVGc3cEU4S0NLRTRpWVFLeEM5UWpGRFRKTlNKUXIxR2NrMmFXMmRzK2ppV1RCekwKbEx3OHYvalBUcDBmYXBjNVhDK3Z3WUJBNWhrMDdzVk8xM0lINkFJVWNUR1BpQVFkd2VGd0VYNzRMZG5hdG1JeAo1NUx2RjRXR0o4M2xua1hrc0twWU5UR3hPNkxnelU3SUpCQjdsV1JMM3RSajFhMmxvdzZPVi9KZ1pTRm1hSFd1CnJqVFlZbGlEN2N6VlFzVWNUeEJoY09BUDhEWkMwczlyQ3lXSWp3NWNoMmRLbTM3WjNqbklWVVJ0eGQ1WTlOaloKUld2Nm5MR0JubXM0NTh1WFpZTndNV2hJV1RBdVBYVncvMTcyRGxTWUJ5KzFBSWxLQ3kxNHlHWW5nZ3dRUXFFMgpTZFV3c0FZTDErUG5IZ1laZTQ0VkJzMkhtczhGUnVSVmo5b21Sb1FEQnRvWkcyUTluSFVZd2crd21qY2V5STRMCnRPdjIwazFjc3hDb0F0dllDamxUR0pKK0ZFWHVkTExHWjkvcWVzaHBTMEV1Z0xva0Y4UFg1MXpxdVMvVnZQV1MKc1NRTUxYWnJLOWJKQmRJZFVsdkxQSTRIOXlHV2I4dlZsUEY5VWVYNSt5WTZMY0gwNjdCVHREdXBWZUNnRytwSApEb3ZPSVM0MQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRQ3JFOWZGS3gzTFk4L1MKTzI3SG4reG9xU3dnOUNTL3RKT2hvN2Z5bFh0UzRSS2hqRWdIVVZ4VVhSZ0xKSGdod2xpUHI1ZmFicE9XcHhvbwpUcHBabEtsU0Q0NzV2cjRFUnF6dlowYSttaWk5bzVNblJtVjlNQUxWUG0vV0hqVm9FeVp6T2N3ZWFnT0l0TXg5Cm4wbWpicit4VkJ6NFBsSEFRd0QzUmVCMjZPZ0JRQ0E4aHZkY1JnVnY5eC9LRlFHbGs3SStmY2pBOXV2dFM4czYKNFp3bXJXVGJ1ektQSTFZejZWL2NCT2VhT09MeWFWNkJLWkJ3dklZN3ZXTnNwY21xL1JoQ2sxS3lMbG5rd29BOQowUDlrbmJlLzFUcnhnWFFwZXFucHRDNEs0Nkl4SU80a2cyZXdtazJISHN1M01xOWdrcFlNY2UzWmZjKzRGZUVqCi9uRUQycmE1SnJJaTB2NmxzbkRibWdQeW9Ud253SEpzY0s5YnlSVnhod2FWSEVmSFo5VFNpYnNjUWNQaCs0MTYKcFpmLzNNRURkYmhjQVFGcVZ1aVczNFFuTWcvb1BqWmFtV3NKaHNWRzRhVTJLa0hkWEhPMEpxZ0EwN1VjWXdWcAp2S3diVHJMaEFRU3IwMU9FUEFhRjZpekpLWmRvRUZXUFlVenpUOHFZNUU0eTgyZXl6anZXL3R5L2Q3Y1RCY3ZNCkYzM0pkYzlsNk5vQnVNQ2lTN0NMcEpMVHRRSThzRkltSytiQXpCR2RVekpQc1B2Mk9Eb3ozd2EvdWdJTU5yOW0KVFhzdGFpSDRYanNuSG5mYU5TUWUvT0c4MTg5cEVsSCtUazFGbkUwTUZ0WXBST25kWjExWkcyR3JyVHIvTDBVcQpuRnFzbVVETWNVL2xVckZqVHpaSTIyeUtTd1ErV3dJREFRQUJBb0lDQUJaWXByQVdCRFBMaTF0aU1RTzVVNGVPClJYbmVlaWhpWFlCWklzOTRrQjNRMFg2eGxMMEQ5eVA3N3dhUmtuR1NjYi8vQno1Y2dFSEcvUWN6MFR5UFN4aXgKZUpNTnc4TktPZytoZFYrelFrd1hJRU1ha21vcVNjeHg5ZWpKbEY5T1ZSRHJCVXNadlBGdjhHQWVYTitRdVZCZgo5TkxHVFNab2VpbFNndEgxZFV5b2hDMXowYjdIVkxGOTNiU25Uc3BDZ3g5ZmpjZ0syT0ZycTVXNjM0czd6ZmRYCnVmQnhoTEtPTXR2SjlqaXlZbzZZamVRZ09rSkhsZDhheTNCbkxYTDgwVnpzNG5uc3pRZ3hFZEJCU3dMcENSWHgKTTl4VTlRZndBbDdKRHRTVVRGelBlTnZqSURtMHhoaTJ3SlJpOWY2TzF6T3o5QVliUlhVOXdtVlJ1SkJ3MHJvZwp2akxVVU52cktOcDZQMmdJVXFQU3VvdnRlRlM1SCtlSmU3QkV2b2FrM1dhQUYxTVlhTjQrUjVoaWM2SzAwMjRhCnNlUGlmcm95VVIwQTRpcndZbUFlNndzS1JqYmk1RDBPQm5jZHhvSEVzMEdxNm5xcHE4ejJYSkdwRlpYTE40cU0KYVRNNXV3bTQ0enNoaFNaMHk3YXZoQ2U3RitDaFVZTVl4UjZtT3hEWURHQ0g1Q3NrR1RaNjJHKzgrbmZhNE5Zbwovc0pyNUdMbUs0aitoR3NqeFhCbUltVzVZcUEvMHhMN3lDcVdPa2wyU3lPeEFCOUVjOGxKbVhPTjlnbTJZbitlCnhQZ3FSUDI0ZnJwaGdvWGxmMXlDR1JaTUFJbjVhWStXOExxT3phallPYW1wQnRITmMwcHgyZ0Q2VklVbkdxVzcKUDB0Skc3UFVnZ1FHTTI5SEdnZkpBb0lCQVFDL3F0R01KRWlReFludWFJZThJc0JmUlZ2SUlOOUF0eVdpYmFOUApoZEd5TG45UnRiaEl2MHRzOElvcS9iUGdhL1hHYWNYU20ycGNJMGgrNm1sMGkvTVpuSm84czY1RkVuTm1PV3ByCjhsd3Y1RzNUWGhWTnROc1QrblJmakxvVzIzdHBrTmdpSTdrZTBzU2hJTERNZ1U1U0xnOEg0WGNvYjc5YlF3dlIKekxDV0Y4RTZFc0kyaGVWeWlQVEI0KzNsL1pTZUF2c2tnNzFVYUYrYXdPcUxLZlNzM2tiUkJtUlRRY3Z4eExhbwpqOCtwc0tnaUh0TmZ1WldxcHorb1NPU0d3YThkbHQ2WXhpWk43YjdSSGt1cm04Mk5zcS9DMFI1Z2ovNmI4ZlNaCnFWN0tsbXc4YVhqV2huZnl2WnVWeXkwYXRDVGg5eFNJU1hscnQySmxTVnhiN1RRREFvSUJBUURrZjlUbS9NNmUKb2hxdjlqTThPTUV3Q0FuTGRuUEJ5Qi9yMjRqMHBGQUNwem5yYk5jd1c1dERQaXFKcE94WjdoK01sbklMYzRxRApJSmlPYU5vbDlxaERqK1ltLythVWROSHk5d052RXZuWlFsVm9PNUE0T0Q5ekp1T05CZENXNmVaa20xdGpJSmFXCnFYSGRteG5CZkpIa3ROTDBNRnRFZml0N0lhRHo4d3ZRdVR1YTdtbVAxTVVXRFY1dWpPWWZib0NvdW52cndvOWsKUlp3NWdYb21zOVpVQmJGSE4rN3lkRzlBbHBJL1ovejR4V0xEb0FvQVJKejJuMzdXVC9IeE93MzFUeEpRQ2srYQpWL28zNkZ6REZCcEZUNTBhSXNEcVlhWUtFT25Zb0Q3TWpMdmxiZmdDQlAyQmNsaXA1bzBvT0dOQ3N6OG9QMTFVCmI0N2crVGxBZDNqSkFvSUJBQ2gwbk1CUTFFUkNmY2VscHFqT1NQNlMvRGwwdnNyQkhaOTROdFZOTUtMRWI3bEcKZXZ4WDdFcTFSdVNtSWphSGN4d0xMV2N6eUxKai9DUlZ4Q2FHZDZ4N1FvNzNlaHc0TmNWbzd3NlQzR043ZXJiMwpqOVdVQy8zZWludTBqMzdObXZJQVVhNTdEZEwwdCs0dW9VSzVORmZpUXVmdDdpSEozSUVkMkx2UzBaOE1xb3RnCmREL2Y2VHRRcnlEUnhHQWNNeWRiQjdtQVdSRWM2cmtXYVNzd2t1VitFVUtEYjkrbTdxNDhVRFdxRFRJTENLSVQKRVppTjZvcFh2UGIvVThVaDBwMlRQNjdOZkQ1TXBVOHNidHB0QzJrU1Ewa0NyTC9EQlFIVGcwWi8ybk0yWnVnbApkdzBJMnY2UWlPdUlOQ0FEMEJrbDl0NkJhN0NSeDZJTFp3UThRQk1DZ2dFQWFheW81TTdFSzk4aVlvQ0ZQM09yCi9LK3EvL3JmSEI2V2pMaXlCUm84bW8yR0h0ZnVTVUlFY3p1NzVuNXNoRWE1Tm9hWlpheGd3YllBZDlRTUY0U1UKV3ZLZzZTWnVGL2hTNUgvU2lic0g2NjllMmw2NW14YUFXWndCbnNXeXF5aXZVWlg3MU1OTWdZOEp4d2dsQ0RPNQpNVUZqVW1WT3dFVnRqSHVIK1dwTTY1SE8vQjhJbU9rNDRMTDhHanAxYnRIbkZLRnlFQjJodlNqb1VEd09Kdm9DCnhFY0Jyc015Y2RUaFlzaUFDR3pxTkk3czF6WWJpZll4ZFdsYituZHNtRGpNZ3NlMzIyWjVYQk1WK0djeEIxTXoKdHh4VHRyT2Q3b2VNaDVrODNOOTNTNWhHaVp1ckdCd0F0YTRSVFRuL3pEc1B4TmdxL0UwWnQ2UUVPdzFucWVYVwo2UUtDQVFFQWhXWlNTSWJSMCt2ZkhXY1pNZVZZNnFnaEl1M1pLRE94eER0aW53NUE4ZzVweS9jZkNsR3FQTmwvCmNUWng0Sk95QW9xR0RUK2lXbi90V0F5TGF2UXJ5VXRaT1E0MXRYK1Z5WEF1V3NoWUh4WjVHYWduWlV6WHREbXcKUTFtTDBPemozSUlqaTlQVEMxQnVRK2lZQ0ZEMDZvRU01cWFROFF1dVFPUjc1cUU0ZTUyalBmQnJSRkJwamU4WgpWaU9HYWtFY0JnOHljMHc2TDBwWjFSdGsxMFNPVHlnYkhvc1NIamZVVnZ5T2pvSTNaUmQ5ai9ocXN4R0s2Z0VjCnc1bm9pdVk1Yy9wZGFnM3Z1YzNPZHcwZHZ6cEIzWFlLWWxQNzJNY0pqOXdZMkRVWjhCbCtMa3hpOVE0WkRBQzkKTkdqYlNFUUNoNnRIMjk4SmFBZVp3aVA2S2Evb0ZRPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUY3ekNDQTllZ0F3SUJBZ0lVQzU3QlB3c1Q0UGFKSzZjTDVjd0ZMdWlxeEFVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dZWXhDekFKQmdOVkJBWVRBa1JGTVJBd0RnWURWUVFJREFkQ1lYWmhjbWxoTVE4d0RRWURWUVFIREFaTgpkVzVwWTJneER6QU5CZ05WQkFvTUJrSmxiR2RoYVRFaE1COEdBMVVFQXd3WVRXOW9ZVzFsWkNCQ1pXeG5ZV2xsClpDQklZWE56YVc1bE1TQXdIZ1lKS29aSWh2Y05BUWtCRmhGdGIyaGhiV1ZrUUdKbGJHZGhhUzVrWlRBZUZ3MHkKTWpFeU1qSXlNVEExTVRWYUZ3MHlOekV5TWpFeU1UQTFNVFZhTUlHR01Rc3dDUVlEVlFRR0V3SkVSVEVRTUE0RwpBMVVFQ0F3SFFtRjJZWEpwWVRFUE1BMEdBMVVFQnd3R1RYVnVhV05vTVE4d0RRWURWUVFLREFaQ1pXeG5ZV2t4CklUQWZCZ05WQkFNTUdFMXZhR0Z0WldRZ1FtVnNaMkZwWldRZ1NHRnpjMmx1WlRFZ01CNEdDU3FHU0liM0RRRUoKQVJZUmJXOW9ZVzFsWkVCaVpXeG5ZV2t1WkdVd2dnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJSwpBb0lDQVFEZ0ZzRE1ySUdGTUE5SStiLzNIWW85bWNvdlYvQlNFTjl3ZnVTUUZ6c1FwWHdDb3AvREczODRlY0tECkZMYjY4YVB6czVZRDYvZGd4YzMrM0E2TmcrVGN4N1p5RGVpeXRBT1hHNXF3aEdNMXdvM3p2NkF6MXo0RjRjeUEKRloydERhWWx3aXY0MGt2bDR1YUJDVnRrL3lwbnlTZzN6S1AraHdpS0M5aWNEWEY3ejZWaU5US21KQmhzR1VrSQpKdHNTQUUvcERWSzE0T29oaXB2RFQ0bWJqMGlnRi95Uit4RnFLRWZSZUQwbS9RQnMzN0FhNEE5am15MHFsdzd0CnlnSDJpTzJaOGtRZTl1Q0xJNlRybHhrZkJkNVBMN0oxeU9IR0hNOTRpWkxrcGdqVzFpWnJXcElvZUlMUFM5dUQKcm1hOXpGZEwwbUlkaXRpWXBCOUVXZmQxTDRMbndRZUxPclZRdGpkR1ZNWEpmVDlERE52Qk9FTFBQMCtxZ3BOOAppa0haMmRYdE9hQ3NWTGV2Q3RSYVUxSEJ4cWNoSUFrYXQvdXVMbmM4WC9Ua0FnOUJLL3RyMDlZUGhCNVV5bmR4ClYwcTUzd2tGQU9rdGd1NTZ6UlU2WkVLdVZaSjNtYjlrcGhCUzNzS2NML1IvUDJiTUFTa0o0WVZQcXA1dnJyMUkKY01JT3BRR29jeU85cDZEVmNZSlliWWo4aEJ3WHpPeUhIWUM5bHNvdWpPNWFCbzVNbldNQkVmeWJsOG9nbHpONwpyNGZQM0IzdFJXcDcxNlF2cWx6cGg1TUNjMFRwcHd3OW9udnpXeXc0M1ZudENxK0pzTTBZNlpFeEN0eHUyZ0xJCnUrQjNLUWw4Q1FZZmVnK1plQStFeWY5M2pTNkxNa3llalpUMmZzbTE1aThtSTBpMFZRSURBUUFCbzFNd1VUQWQKQmdOVkhRNEVGZ1FVSlBtZUgrNW0rTWRXU1padnczQkc1djZNWTFZd0h3WURWUjBqQkJnd0ZvQVVKUG1lSCs1bQorTWRXU1padnczQkc1djZNWTFZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DCkFnRUFlT3Z5TVpFRE9OVXJmYmlZelQ0a1g0MjZyVjJWSWxodUdFVCtTUFRJemhtYk5EdlAzRFBHbjJ2TWtGUisKVE0rekcxMFdzalR4QTdJbFJBK3R1TmpWNWV1VGZkc1ZsMkdHS1o4aTlUcUJBdGxVclk0SitoWnc4UVRFYVJZNwp0UGlkOUxvOTRQekNtUEdyaXV1Z1hNNWFUK3hKQms5ai9kUmNaL2d4ak1RZk9Hb3l4eGROVnl6aXpiaklLNGFsCjZvMXNwdE9aTExNNjhFYTZvZ3VweVN5ZFdKcFdTbmdoelM0UmZlclBMYlRrL0ZZQStNQ09hV3dUQnNNQ3pjOFEKOGZ3a09ydTRUdnBMZDc1SnI3aVJSV21oMjNCV3N1RnQ4WXpuUFdDMUVsaHhBUW5Sb2RTQnUyU2IrYlZuRmpOegp2MittNTJqeTFmMWlrNXY5YVk0aEZ2UkpkekpNcUJ5UVg5RnR2elJGTCt1ejhxcEJ6dzEzdnR2WG1xa3Zib21aCkxDVmdmN2FhV3NPaUE5YkJiNUtobVVKR3pScEtMSzRBZi84Z2d4cUMybHdBNit5TUdBL2F1blBwWnBQYnlBYVcKUUdKSmM3UDBaalJXcjRhWGk3OFR2KzdFc2VYK2UrcXg4QW83bjVGL2t0ekJHaVo3ZzlYUU1IZmhGTVd6N1ZKVwpqMmNTd0ZnUENGb1hCVkdUdlM3VXpzTytxbFFDR2o3Vi83VlBrdUwxNGRqdDBJTndzZWlaSGppWEFkYjQ5R3FhClJ5Ui9zYzUwVEVjMlJiTGRIMFJXanhXL0MvUnZodmtRM1BWYjJ6c2NjZDJ2anVYSlQ2UFE0djBJNDFjMHNKSDQKRDI5QzJNeHViRzdRT2tYemg3WTB4Tkh2bjRBelNPdmlIUDVMaGlnRmZpczZqcW89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
type: kubernetes.io/tls
--- 
apiVersion: v1
kind: Secret
metadata:
  name: auth-secret
  namespace: ${CABPR_NAMESPACE}
data:
  username: YWRtaW4K
  password: YWRtaW4K
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${CLUSTER_NAME}-lb-config
  namespace: ${CABPR_NAMESPACE}
data:
  value: |-
    # generated by kind
    global
      log /dev/log local0
      log /dev/log local1 notice
      daemon
      # limit memory usage to approximately 18 MB
      # (see https://github.com/kubernetes-sigs/kind/pull/3115)
      maxconn 100000

    resolvers docker
      nameserver dns 127.0.0.11:53

    defaults
      log global
      mode tcp
      option dontlognull
      # TODO: tune these
      timeout connect 5000
      timeout client 50000
      timeout server 50000
      # allow to boot despite dns don't resolve backends
      default-server init-addr none

    frontend stats
      mode http
      bind *:8404
      stats enable
      stats uri /stats
      stats refresh 1s
      stats admin if TRUE

    frontend control-plane
      bind *:{{ .FrontendControlPlanePort }}
      {{ if .IPv6 -}}
      bind :::{{ .FrontendControlPlanePort }};
      {{- end }}
      default_backend kube-apiservers

    backend kube-apiservers
      option httpchk GET /healthz
      http-check expect status 401
      # TODO: we should be verifying (!)
      {{range $server, $backend := .BackendServers}}
      server {{ $server }} {{ JoinHostPort $backend.Address $.BackendControlPlanePort }} check check-ssl verify none resolvers docker resolve-prefer {{ if $.IPv6 -}} ipv6 {{- else -}} ipv4 {{- end }}
      {{- end}}

    frontend rke2-join
      bind *:9345
      {{ if .IPv6 -}}
      bind :::9345;
      {{- end }}
      default_backend rke2-servers

    backend rke2-servers
      option httpchk GET /v1-rke2/readyz
      http-check expect status 403
      {{range $server, $backend := .BackendServers}}
      server {{ $server }} {{ $backend.Address }}:9345 check check-ssl verify none
      {{- end}}