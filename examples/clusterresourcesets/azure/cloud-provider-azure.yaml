apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: cloud-provider-azure
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      cloud-provider: azure
  resources:
  - kind: ConfigMap
    name: cloud-provider-azure
  strategy: Reconcile
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloud-provider-azure
  namespace: default
data:
  azure-ccm-external.yaml: |
    ---
    # Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: cloud-controller-manager
      namespace: kube-system
    ---
    # Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        k8s-app: cloud-node-manager
        kubernetes.io/cluster-service: "true"
      name: cloud-node-manager
      namespace: kube-system
    ---
    # Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
    kind: ConfigMap
    apiVersion: v1
    metadata:
      name: cloud-provider-azure-scripts
      namespace: kube-system
      labels:
        app: cloud-provider-azure-windows
    data:
      # This is a workaround for https://github.com/kubernetes/kubernetes/issues/104562.
      # TODO: remove this once containerd v1.7 is available.
      start.ps1: |
        $cm = "$env:CONTAINER_SANDBOX_MOUNT_POINT/cloud-node-manager.exe"

        ((Get-Content -path $env:CONTAINER_SANDBOX_MOUNT_POINT/var/lib/cpaw/kubeconfig.conf -Raw) -replace '/var',"$($env:CONTAINER_SANDBOX_MOUNT_POINT)/var") | Set-Content -Path $env:CONTAINER_SANDBOX_MOUNT_POINT/var/lib/cpaw/kubeconfig-cnm.conf

        $argList = @()

        foreach ($var in @("LOG_VERBOSITY", "CLOUD_CONFIG", "KUBE_API_BURST", "KUBE_API_CONTENT_TYPE", "KUBE_API_QPS", "MASTER", "MIN_RESYNC_PERIOD", "NODE_STATUS_UPDATE_FREQUENCY", "WAIT_ROUTES")) {
          if ([System.Environment]::GetEnvironmentVariable($var) -NE $null) {
            $argList += [System.Environment]::GetEnvironmentVariable($var)
          }
        }

        Write-Host "Running $cm $argList --node-name=$env:NODE_NAME --use-instance-metadata=true --kubeconfig=$env:CONTAINER_SANDBOX_MOUNT_POINT/var/lib/cpaw/kubeconfig-cnm.conf"
        Invoke-Expression "$cm $argList --node-name=$env:NODE_NAME --use-instance-metadata=true --kubeconfig=$env:CONTAINER_SANDBOX_MOUNT_POINT/var/lib/cpaw/kubeconfig-cnm.conf"
    ---
    # Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: system:cloud-controller-manager
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
      labels:
        k8s-app: cloud-controller-manager
    rules:
      - apiGroups:
          - ""
        resources:
          - events
        verbs:
          - create
          - patch
          - update
      - apiGroups:
          - ""
        resources:
          - nodes
        verbs:
          - "*"
      - apiGroups:
          - ""
        resources:
          - nodes/status
        verbs:
          - patch
      - apiGroups:
          - ""
        resources:
          - services
        verbs:
          - list
          - patch
          - update
          - watch
      - apiGroups:
          - ""
        resources:
          - services/status
        verbs:
          - list
          - patch
          - update
          - watch
      - apiGroups:
          - ""
        resources:
          - serviceaccounts
        verbs:
          - create
          - get
          - list
          - watch
          - update
      - apiGroups:
          - ""
        resources:
          - persistentvolumes
        verbs:
          - get
          - list
          - update
          - watch
      - apiGroups:
          - ""
        resources:
          - endpoints
        verbs:
          - create
          - get
          - list
          - watch
          - update
      - apiGroups:
          - ""
        resources:
          - secrets
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - coordination.k8s.io
        resources:
          - leases
        verbs:
          - get
          - create
          - update
      - apiGroups:
          - discovery.k8s.io
        resources:
          - endpointslices
        verbs:
          - get
          - list
          - watch
    ---
    # Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: cloud-node-manager
      labels:
        k8s-app: cloud-node-manager
        kubernetes.io/cluster-service: "true"
    rules:
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: ["watch", "list", "get", "update", "patch"]
      - apiGroups: [""]
        resources: ["nodes/status"]
        verbs: ["patch"]
    ---
    # Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: system:cloud-controller-manager
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:cloud-controller-manager
    subjects:
      - kind: ServiceAccount
        name: cloud-controller-manager
        namespace: kube-system
      - kind: User
        name: cloud-controller-manager
    ---
    # Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: cloud-node-manager
      labels:
        k8s-app: cloud-node-manager
        kubernetes.io/cluster-service: "true"
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cloud-node-manager
    subjects:
      - kind: ServiceAccount
        name: cloud-node-manager
        namespace: kube-system
    ---
    # Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: system:cloud-controller-manager:extension-apiserver-authentication-reader
      namespace: kube-system
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: extension-apiserver-authentication-reader
    subjects:
      - kind: ServiceAccount
        name: cloud-controller-manager
        namespace: kube-system
      - apiGroup: ""
        kind: User
        name: cloud-controller-manager
    ---
    # Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: cloud-node-manager
      namespace: kube-system
      labels:
        component: cloud-node-manager
        kubernetes.io/cluster-service: "true"
    spec:
      selector:
        matchLabels:
          k8s-app: cloud-node-manager
      template:
        metadata:
          labels:
            k8s-app: cloud-node-manager
          annotations:
            cluster-autoscaler.kubernetes.io/daemonset-pod: "true"
        spec:
          priorityClassName: system-node-critical
          serviceAccountName: cloud-node-manager
          hostNetwork: true # required to fetch correct hostname
          nodeSelector:
            kubernetes.io/os: linux
          tolerations:
            - key: CriticalAddonsOnly
              operator: Exists
            - key: node-role.kubernetes.io/master
              effect: NoSchedule
            - key: node-role.kubernetes.io/control-plane
              effect: NoSchedule
            - operator: "Exists"
              effect: NoExecute
            - operator: "Exists"
              effect: NoSchedule
          containers:
            - name: cloud-node-manager
              image: mcr.microsoft.com/oss/kubernetes/azure-cloud-node-manager:v1.31.1
              imagePullPolicy: IfNotPresent
              command: ["cloud-node-manager"]
              args:
                - --node-name=$(NODE_NAME)
                - "--v=2"
              env:
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
              resources:
                requests:
                  cpu: 50m
                  memory: 50Mi
                limits:
                  cpu: 2
                  memory: 512Mi
    ---
    # Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: cloud-node-manager-windows
      namespace: kube-system
      labels:
        component: cloud-node-manager
        kubernetes.io/cluster-service: "true"
    spec:
      selector:
        matchLabels:
          k8s-app: cloud-node-manager-windows
      template:
        metadata:
          labels:
            k8s-app: cloud-node-manager-windows
          annotations:
            cluster-autoscaler.kubernetes.io/daemonset-pod: "true"
        spec:
          priorityClassName: system-node-critical
          serviceAccountName: cloud-node-manager
          securityContext:
            windowsOptions:
              hostProcess: true
              runAsUserName: "NT AUTHORITY\\system"
          hostNetwork: true
          nodeSelector:
            kubernetes.io/os: windows
          tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - operator: "Exists"
            effect: NoExecute
          - operator: "Exists"
            effect: NoSchedule
          volumes:
          - configMap:
              name: kube-proxy
            name: kube-proxy
          - configMap:
              name: cloud-provider-azure-scripts
            name: cloud-provider-azure-scripts
          containers:
          - name: cloud-node-manager
            image: mcr.microsoft.com/oss/kubernetes/azure-cloud-node-manager:v1.31.1
            imagePullPolicy: IfNotPresent
            command: ["powershell.exe"]
            args: ["$env:CONTAINER_SANDBOX_MOUNT_POINT/scripts/start.ps1"]
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: LOG_VERBOSITY
              value: "--v=2"
            volumeMounts:
            - mountPath: /var/lib/cpaw
              name: kube-proxy
            - mountPath: /scripts
              name: cloud-provider-azure-scripts
            resources:
              requests:
                cpu: 50m
                memory: 50Mi
              limits:
                cpu: 2
                memory: 512Mi
    ---
    # Source: cloud-provider-azure/templates/cloud-provider-azure.yaml
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: cloud-controller-manager
      namespace: kube-system
      labels:
        component: cloud-controller-manager
    spec:
      selector:
        matchLabels:
          tier: control-plane
          component: cloud-controller-manager
      replicas: 1
      template:
        metadata:
          labels:
            component: cloud-controller-manager
            tier: control-plane
        spec:
          priorityClassName: system-node-critical
          hostNetwork: true
          nodeSelector: 
            node-role.kubernetes.io/control-plane: ""
          serviceAccountName: cloud-controller-manager
          tolerations: 
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
            - effect: NoSchedule
              key: node-role.kubernetes.io/control-plane
            - effect: NoExecute
              key: node-role.kubernetes.io/etcd
          topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                tier: control-plane
                component: cloud-controller-manager
          containers:
            - name: cloud-controller-manager
              image: mcr.microsoft.com/oss/kubernetes/azure-cloud-controller-manager:v1.31.1
              imagePullPolicy: IfNotPresent
              command: ["cloud-controller-manager"]
              args:
                - "--allocate-node-cidrs=true"
                - "--cloud-config=/etc/kubernetes/azure.json"
                - "--cloud-provider=azure"
                - "--cluster-cidr=10.244.0.0/16"
                - "--cluster-name=capi-machinepool"
                - "--configure-cloud-routes=true"
                - "--controllers=*,-cloud-node"
                - "--leader-elect=true"
                - "--route-reconciliation-period=10s"
                - "--secure-port=10268"
                - "--v=2"
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 4
                  memory: 2Gi
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 10268
                  scheme: HTTPS
                initialDelaySeconds: 20
                periodSeconds: 10
                timeoutSeconds: 5
              volumeMounts:
                - name: etc-kubernetes
                  mountPath: /etc/kubernetes
                - name: ssl-mount
                  mountPath: /etc/ssl
                  readOnly: true
                - name: msi
                  mountPath: /var/lib/waagent/ManagedIdentity-Settings
                  readOnly: true
                - name: azure-identity-token
                  mountPath: /var/run/secrets/azure/tokens
                  readOnly: true        
          volumes:
            - name: etc-kubernetes
              hostPath:
                path: /etc/kubernetes
            - name: ssl-mount
              hostPath:
                path: /etc/ssl
            - name: msi
              hostPath:
                path: /var/lib/waagent/ManagedIdentity-Settings
            - name: azure-identity-token
              projected:
                defaultMode: 420
                sources:
                  - serviceAccountToken:
                      audience: api://AzureADTokenExchange
                      expirationSeconds: 3600
                      path: azure-identity-token
